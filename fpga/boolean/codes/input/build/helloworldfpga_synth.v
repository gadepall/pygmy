/* Generated by Yosys 0.9+2406 (git sha1 ca763e6d, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os) */

(* top =  1  *)
(* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:9.1-52.10" *)
module helloworldfpga(W, X, Y, Z, a, b, c, d, e, f, g);
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:44.15-44.16" *)
  wire A;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:44.13-44.14" *)
  wire B;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:11.8-11.9" *)
  input W;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:12.8-12.9" *)
  input X;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:13.8-13.9" *)
  input Y;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:14.8-14.9" *)
  input Z;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:15.13-15.14" *)
  output a;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:16.13-16.14" *)
  output b;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:17.13-17.14" *)
  output c;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:18.13-18.14" *)
  output d;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:19.13-19.14" *)
  output e;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:20.13-20.14" *)
  output f;
  (* src = "/storage/emulated/0/github/vaman/fpga/boolean/codes/input/sevenseg_ip.v:21.13-21.14" *)
  output g;
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _0_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h0),
    .O_EN(1'h1),
    .\O_PAD_$out (a)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _1_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h1),
    .O_EN(1'h1),
    .\O_PAD_$out (b)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _2_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h0),
    .O_EN(1'h1),
    .\O_PAD_$out (c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _3_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h0),
    .O_EN(1'h1),
    .\O_PAD_$out (d)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _4_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h1),
    .O_EN(1'h1),
    .\O_PAD_$out (e)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _5_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h0),
    .O_EN(1'h1),
    .\O_PAD_$out (f)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v:81.9-88.8" *)
  BIDIR_CELL #(
    .DS(1'h0),
    .ESEL(1'h1),
    .FIXHOLD(1'h0),
    .OSEL(1'h1),
    .WPD(1'h0)
  ) _6_ (
    .I_DAT(),
    .I_EN(1'h0),
    .\I_PAD_$inp (),
    .O_DAT(1'h0),
    .O_EN(1'h1),
    .\O_PAD_$out (g)
  );
  assign A = 1'h1;
  assign B = 1'h0;
endmodule
